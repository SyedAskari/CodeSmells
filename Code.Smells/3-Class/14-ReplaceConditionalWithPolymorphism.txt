EXPLANATION

The last refactoring that we have time to cover in this module is how to replace conditionals with polymorphism. 
If you find that you have a conditional that chooses different behavior depending on the kind of object it's 
working with, the same type that maybe has a status field or a type property, the best thing to do is to move 
each leg of the conditional into a method in a different subclass of that object. Then you can either make the 
parent method abstract or put default behavior in it. This allows us to take advantage of polymorphism, one of 
the coolest parts of object-oriented programming and a great word to throw around too. The huge advantage 
polymorphism brings to your programs is reduction in complexity. The value in performing this refactoring 
is thus indirect proportion to how many switch or if statements it can eliminate. It's also most valuable 
if the type codes are changing. Since without polymorphism anytime a new option is added, every conditional 
in the system that's using it must be located and updated. When you have polymorphic behavior, a new option 
is implemented simply by adding a new subclass. Now we're ready to work on the conditional, which may be an 
if or a switch statement. If it's just part of a larger method, first, perform extract method so that we can 
get just the conditional by itself in a method. Next, make sure the method with the conditional is at the top 
of the inheritance hierarchy. Now choose one subclass. You're creating this new subclass. Have it override the 
conditional method. Copy the body of the conditional that applies to this kind of object into that overridden 
method. If it uses private fields on the base class, you may need to make them protected. Now you're ready to 
compile and run your tests. Next, you can remove that part of the conditional. You can have it throw an exception 
if you'd like because it should never be executed. Compile and test again. Repeat this until you've pulled out 
each leg of the conditional into its own separate subclass method that overrides the method in the base class. 
Once you've done this completely, you can make the superclass method abstract if you'd like or you can leave 
some default behavior in there.